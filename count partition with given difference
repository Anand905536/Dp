import java.util.*;
public class Solution {
    public static int findWays(int num[], int tar)
    {
        int n=num.length;
        int dp[][]=new int[n][tar+1];
        for(int rows[]:dp)
        {
            Arrays.fill(rows,-1);
        }
        return f(n-1,tar,num,dp);
    }
    public static int f(int ind,int target,int a[],int dp[][])
    {
        if(ind == 0){
         if(target==0 && a[ind]==0)return 2;
           if(target==0 || a[ind]==target)return 1;
           else  return 0;
          }
       if(dp[ind][target]!=-1)
        return dp[ind][target];
        
    int notTaken = f(ind-1,target,a,dp);
    
    int taken = 0;
    if(a[ind]<=target)
        taken = f(ind-1,target-a[ind],a,dp);
        int mod=(int)(Math.pow(10,9)+7);
        
    return dp[ind][target]=(notTaken+taken)%mod;
    }   
	public static int countPartitions(int n, int d, int[] arr)
    {
		int totsum=0;
        for(int i=0;i<n;i++){
            totsum+=arr[i];
          }
        if(totsum-d<0)return 0;
         if((totsum-d)%2==1) return 0;
        return findWays(arr,(totsum-d)/2);
     }
}
