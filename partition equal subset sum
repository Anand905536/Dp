import java.util.*;
public class Solution {
    public static boolean f(int ind,int target,int a[],int dp[][])
    {
        if(target==0)return true;
        if(ind==0)
        {
            return a[ind]==target;
        }
        if(dp[ind][target]!=-1)
        {
            return dp[ind][target]==0?false:true;
        }
        boolean taken=false;
        if(target>=a[ind])
        {
            taken=f(ind-1,target-a[ind],a,dp);
        }
        boolean nottaken=f(ind-1,target,a,dp);
        dp[ind][target]=nottaken||taken?1:0;
        return nottaken||taken;
    }
	public static boolean canPartition(int[] arr, int n) {
		int totsum=0;
        for(int i=0;i<n;i++)totsum+=arr[i];
        if(totsum%2!=0)
        {
            return false;
        }
        else{
           int k=totsum/2;
            int dp[][]=new int[n][k+1];
            for(int rows[]:dp)
            {
                Arrays.fill(rows,-1);
            }
            return f(n-1,k,arr,dp);
       }
	}
}
