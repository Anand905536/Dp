import java.util.*;
public class Solution {

	public static int knapsack(int[] weights, int[] values, int n, int maxWeight) {
		int dp[][]=new int[n][maxWeight+1];
        for(int rows[]:dp)
        {
            Arrays.fill(rows,-1);
         }
        return f(weights,values,n-1,maxWeight,dp);
	}
    public static int f(int[]wt,int[]val,int ind,int W ,int[][] dp)
    {
        if(ind==0)
        {
            if(wt[0]<=W) return val[0];
       else return 0;
           
        }
       
        if(dp[ind][W]!=-1)
        {
            return dp[ind][W];
        }
        int nottaken=0+f(wt,val,ind-1,W,dp);
        int taken=Integer.MIN_VALUE;
        if(wt[ind]<=W)
        {
            taken=val[ind]+f(wt,val,ind-1,W-wt[ind],dp);
        }
        return dp[ind][W]=Math.max(taken,nottaken);
    }

}
